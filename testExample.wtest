import aparatos.*
import pacientes.*

describe "group of tests PARTE 1 y 2" {
  const bici = new AparatoBicicleta()
  const magneto = new AparatoMagneto()
  const minitramp = new AparatoMinitramp()

  const leonardo = new Persona(edad=40, nivelFortalezaMusc=20, nivelDolorMusc=10, rutina=[bici, minitramp, bici, magneto])
  const milena = new Persona(edad=3, nivelFortalezaMusc=50, nivelDolorMusc=30, rutina=[magneto, bici])


  test "Leonardo puede usar los tres aparatos creados" {
    assert.that(leonardo.puedeUsarAparato(bici) and 
      leonardo.puedeUsarAparato(magneto) and
      leonardo.puedeUsarAparato(minitramp))
  }

  test "Milena puede usar sólo el magneto" {
    assert.that(milena.puedeUsarAparato(magneto))
    assert.notThat(milena.puedeUsarAparato(minitramp))
    assert.notThat(milena.puedeUsarAparato(bici))

  }

  test "Después de usar el magneto una vez, el nivel de dolor de Leonardo baja a 9." {
    leonardo.usarAparato(magneto)
    assert.equals(9, leonardo.nivelDolorMusc())
  }

  test "Después de usar el magneto una vez, el nivel de dolor de Milena baja a 27." {
    milena.usarAparato(magneto)
    assert.equals(27, milena.nivelDolorMusc())

  }

  test "Después de usar la bicicleta una vez, el nivel de dolor de Leonardo baja a 6, y la fortaleza sube a 23." {
    leonardo.usarAparato(bici)
    assert.equals(6, leonardo.nivelDolorMusc())
    assert.equals(23, leonardo.nivelFortalezaMusc())
  }

  test "Después de usar el minitramp una vez, la fortaleza de Leonardo sube a 24." {
    leonardo.usarAparato(minitramp)
    assert.equals(24, leonardo.nivelFortalezaMusc())

  }

  test "Leonardo puede hacer la rutina que tiene asignada." {
    assert.that(leonardo.puedeRealizarRutina())
  }

  test "Y despues de realizar la rutina, el nivel de dolor de Leonardo baja a 1.8, y su fortaleza sube a 30." {
    leonardo.realizarRutina()
    assert.equals(1.8, leonardo.nivelDolorMusc())
    assert.equals(30, leonardo.nivelFortalezaMusc())
  }

  test "Milena no puede hacer la rutina que tiene asignada" {
    assert.notThat(milena.puedeRealizarRutina())
  }

  

}

describe "group of test PARTE 3" {
  const bici = new AparatoBicicleta()
  const biciRoja = new AparatoBicicleta(color = "rojo")
  const magneto = new AparatoMagneto()
  const magnetoVer = new AparatoMagneto(color = "verde")
  const minitramp = new AparatoMinitramp()

  const nicolas = new PacienteResistente(edad=40, nivelFortalezaMusc=20, nivelDolorMusc=10, rutina=[bici, minitramp, bici, magneto])
  const victoria = new PacienteCaprichoso(edad=30, nivelFortalezaMusc=40, nivelDolorMusc=10, rutina=[bici, minitramp, bici, magneto])
  const julian = new PacienteCaprichoso(edad=20, nivelFortalezaMusc=50, nivelDolorMusc=54, rutina=[biciRoja, magnetoVer, bici])
  const zoe = new PacienteRapidaRecup(edad=50, nivelFortalezaMusc=40, nivelDolorMusc=14, rutina=[bici, minitramp, bici, magneto])

  test "Nicolás puede hacer la rutina que tiene asignada. Después de hacerla una vez, 
  su nivel de dolor baja a 1.8, y su fortaleza sube a 34" {
    assert.that(nicolas.puedeRealizarRutina())
    nicolas.realizarRutina()
    assert.equals(1.8, nicolas.nivelDolorMusc())
    assert.equals(34, nicolas.nivelFortalezaMusc())
  }

  test "Victoria no puede hacer la rutina que tiene asignada." {
    assert.notThat(victoria.puedeRealizarRutina())
  }

  test "Julián puede hacer la rutina que tiene asignada. Después de hacerla una vez, 
  su nivel de dolor baja a 29.3, y su fortaleza sube a 62." {
    assert.that(julian.puedeRealizarRutina())
    julian.realizarRutina()
    assert.equals(29.3, julian.nivelDolorMusc())
    assert.equals(62, julian.nivelFortalezaMusc())
  }

  test "Zoe puede hacer la rutina que tiene asignada. Después de asignar a 2 el valor de 
  decremento de dolor para pacientes de rápida recuperación, y de que Zoe haga su rutinauna
   vez, su nivel de dolor baja a 3.4, y su fortaleza sube a 51." {
    assert.that(zoe.puedeRealizarRutina())
    curacionRapidaRecup.nuevoValor(2)
    zoe.realizarRutina()
    assert.equals(3.4, zoe.nivelDolorMusc())
    assert.equals(51, zoe.nivelFortalezaMusc())
  }
}